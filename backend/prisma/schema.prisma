generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model UserAccount {
  user_id            Int                 @id @default(autoincrement())
  full_name          String?
  email              String              @unique
  password_hash      String?
  role               UserRole            @default(customer)
  status             UserStatus          @default(active)
  can_access         Json?
  created_at         DateTime            @default(now())
  Cart               Cart[]
  Category           Category[]
  category_updates   CategoryContent[]
  chats_admin        ChatMessage[]       @relation("AdminChats")
  chats_sent         ChatMessage[]       @relation("UserChats")
  collection_updates CollectionContent[]
  homepage_updates   HomepageContent[]
  orders             Order[]
  refunds            Refund[]
  Wishlist           Wishlist[]
}

model Category {
  category_id     Int               @id @default(autoincrement())
  name            String            @unique
  updated_at      DateTime          @default(now())
  updated_by      Int?
  updatedBy       UserAccount?      @relation(fields: [updated_by], references: [user_id])
  CategoryContent CategoryContent[]
  Product         Product[]
}

model Collection {
  collection_id     Int                 @id @default(autoincrement())
  name              String              @unique
  created_at        DateTime            @default(now())
  collection_image  String?
  description       String?
  CollectionContent CollectionContent[]
  products          Product[]
}

model Product {
  product_id     Int         @id @default(autoincrement())
  sku            String?     @unique
  name           String
  description    String?
  original_price Decimal?
  current_price  Decimal?
  stock          Int         @default(0)
  size           String?
  images         Json?
  created_at     DateTime    @default(now())
  category_id    Int?
  collection_id  Int?
  slug           String?     @unique
  cartItems      Cart[]
  inventory      Inventory[]
  orderItems     OrderItem[]
  category       Category?   @relation(fields: [category_id], references: [category_id])
  collection     Collection? @relation(fields: [collection_id], references: [collection_id])
  sizeStocks     SizeStock[]
  wishlistItems  Wishlist[]
}

model SizeStock {
  size_stock_id Int      @id @default(autoincrement())
  product_id    Int
  size          String
  stock         Int      @default(0)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  product       Product  @relation(fields: [product_id], references: [product_id], onDelete: Cascade)

  @@unique([product_id, size])
}

model Inventory {
  inventory_id Int                 @id @default(autoincrement())
  product_id   Int
  quantity     Int
  change_type  InventoryChangeType
  note         String?
  change_date  DateTime            @default(now())
  product      Product             @relation(fields: [product_id], references: [product_id])
}

model Cart {
  cart_id    Int         @id @default(autoincrement())
  user_id    Int
  product_id Int
  quantity   Int         @default(1)
  added_at   DateTime    @default(now())
  product    Product     @relation(fields: [product_id], references: [product_id])
  user       UserAccount @relation(fields: [user_id], references: [user_id])
}

model Wishlist {
  wishlist_id Int         @id @default(autoincrement())
  user_id     Int
  product_id  Int
  added_at    DateTime    @default(now())
  product     Product     @relation(fields: [product_id], references: [product_id])
  user        UserAccount @relation(fields: [user_id], references: [user_id])
}

model Order {
  order_id         Int            @id @default(autoincrement())
  user_id          Int?
  email            String
  first_name       String
  last_name        String
  street_address   String
  barangay         String
  city_municipality String
  province_region  String
  postal_code      String
  phone            String
  notes            String?
  shipping_address String?
  shipping_method  ShippingMethod @default(Standard)
  payment_method   String
  total_price      Decimal?
  shipping_cost    Decimal?       @default(0)
  status           OrderStatus    @default(Pending)
  checkout_session_id String?
  tracking_number  String?
  shipped_date     DateTime?
  created_at       DateTime       @default(now())
  delivered_date   DateTime?
  user             UserAccount?   @relation(fields: [user_id], references: [user_id])
  items            OrderItem[]
  refunds          Refund[]
}

model OrderItem {
  order_item_id Int      @id @default(autoincrement())
  order_id      Int
  product_id    Int?
  name          String?
  quantity      Int
  price         Decimal
  size          String?
  order         Order    @relation(fields: [order_id], references: [order_id])
  product       Product? @relation(fields: [product_id], references: [product_id])
}


model Refund {
  refund_id    Int          @id @default(autoincrement())
  order_id     Int
  amount       Decimal?
  reason       String?
  refund_date  DateTime     @default(now())
  processed_by Int?
  order        Order        @relation(fields: [order_id], references: [order_id])
  processedBy  UserAccount? @relation(fields: [processed_by], references: [user_id])
}

model PendingOrder {
  pending_order_id    Int      @id @default(autoincrement())
  checkout_session_id String   @unique
  order_data          Json
  created_at          DateTime @default(now())
  expires_at          DateTime
}

model ChatMessage {
  chat_id       Int          @id @default(autoincrement())
  user_id       Int?
  admin_id      Int?
  message       String
  is_from_admin Boolean      @default(false)
  is_resolved   Boolean      @default(false)
  created_at    DateTime     @default(now())
  admin         UserAccount? @relation("AdminChats", fields: [admin_id], references: [user_id])
  user          UserAccount? @relation("UserChats", fields: [user_id], references: [user_id])
}

model AutoReply {
  auto_reply_id    Int      @id @default(autoincrement())
  title            String?
  reply_message    String?
  trigger_keywords String[]
  created_at       DateTime @default(now())
}

model HomepageContent {
  id                 Int          @id @default(autoincrement())
  logo_url           String?
  hero_images        Json?
  title              String?
  description        String?
  promo_image        String?
  updated_by         Int?
  updated_at         DateTime     @default(now())
  userAccountUser_id Int?
  UserAccount        UserAccount? @relation(fields: [userAccountUser_id], references: [user_id])
}

model CategoryContent {
  id                 Int          @id @default(autoincrement())
  category_images    Json?
  title              String?
  description        String?
  promo_images       String?
  updated_by         Int?
  updated_at         DateTime     @default(now())
  userAccountUser_id Int?
  category_id        Int?
  slug               String       @unique
  category           Category?    @relation(fields: [category_id], references: [category_id])
  UserAccount        UserAccount? @relation(fields: [userAccountUser_id], references: [user_id])
}

model CollectionContent {
  id                 Int          @id @default(autoincrement())
  collection_image   Json?
  title              String?
  description        String?
  promo_images       String?
  updated_at         DateTime     @default(now())
  userAccountUser_id Int?
  collection_id      Int?
  slug               String       @unique
  collection         Collection?  @relation(fields: [collection_id], references: [collection_id])
  UserAccount        UserAccount? @relation(fields: [userAccountUser_id], references: [user_id])
}

enum UserRole {
  customer
  admin
  manager
  csr
  clerk
}

enum UserStatus {
  active
  inactive
  suspended
}

enum InventoryChangeType {
  addition
  sale
  return
  adjustment
}

enum OrderStatus {
  Pending
  Processing
  Shipped
  Delivered
  Cancelled
  Refunded
}

enum ShippingMethod {
  Standard
}
